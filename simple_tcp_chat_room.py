# -*- coding: utf-8 -*-
"""Simple TCP chat room.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vEnhT8vd6K3LxliVQ10hLu5ZMzZbVsKZ
"""

import socket
import threading

# Server setup
host = '127.0.0.1'  # Localhost
port = 12345
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind((host, port))
server_socket.listen()
clients = []
usernames = []


# Broadcast message to all clients
def broadcast(message, client_socket=None):
    for client in clients:
        if client != client_socket:
            client.send(message)


# Handle individual client connection
def handle_client(client_socket):
    while True:
        try:
            message = client_socket.recv(1024)
            broadcast(message, client_socket)
        except:
            index = clients.index(client_socket)
            clients.remove(client_socket)
            client_socket.close()
            username = usernames[index]
            broadcast(f'{username} has left the chat.'.encode('utf-8'))
            usernames.remove(username)
            break


# Accept connections
def receive_connections():
    print("Server is running and listening...")
    while True:
        client_socket, client_address = server_socket.accept()
        print(f"Connection from {client_address} established.")

        # Request and store username
        client_socket.send("USERNAME".encode('utf-8'))
        username = client_socket.recv(1024).decode('utf-8')
        usernames.append(username)
        clients.append(client_socket)

        print(f"Username of the client is {username}")
        broadcast(f"{username} has joined the chat!".encode('utf-8'))

        client_socket.send("Connected to the server!".encode('utf-8'))
        thread = threading.Thread(target=handle_client, args=(client_socket,))
        thread.start()


receive_connections()


# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.


def print_hi(name):
    # Use a breakpoint in the code line below to debug your script.
    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    print_hi('PyCharm')

# See PyCharm help at https://www.jetbrains.com/help/pycharm/



import socket
import threading

# Setup for the client
host = input("Enter the server IP address (default is '127.0.0.1' for localhost): ") or '127.0.0.1'
port = int(input("Enter the server port (default is 12345): ") or 12345)
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
    client_socket.connect((host, port))
    print("Connected to the server successfully!")
except Exception as e:
    print(f"Connection failed: {e}")
    exit(1)

# Function to receive messages
def receive_messages():
    while True:
        try:
            message = client_socket.recv(1024).decode('utf-8')
            if message == 'USERNAME':
                client_socket.send(username.encode('utf-8'))
            else:
                print(message)
        except:
            print("An error occurred while receiving a message.")
            client_socket.close()
            break

# Function to send messages
def send_messages():
    while True:
        message = input("")
        if message.lower() == 'quit':
            client_socket.send(f"{username} has left the chat.".encode('utf-8'))
            client_socket.close()
            print("You left the chat.")
            break
        else:
            client_socket.send(f'{username}: {message}'.encode('utf-8'))

# Get username and start threads
username = input("Choose a username: ")
client_socket.send(username.encode('utf-8'))
print("Type 'quit' to exit the chat.")

# Start the receive and send message threads
receive_thread = threading.Thread(target=receive_messages)
receive_thread.start()
send_thread = threading.Thread(target=send_messages)
send_thread.start()